<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kreamyu&#39;s blog</title>
    <link>https://kreamyu.github.io/</link>
    <description>Recent content on kreamyu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 18 Sep 2022 10:49:23 +0800</lastBuildDate><atom:link href="https://kreamyu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>赛博朋克边缘行者</title>
      <link>https://kreamyu.github.io/%E8%B5%9B%E5%8D%9A%E6%9C%8B%E5%85%8B%E8%BE%B9%E7%BC%98%E8%A1%8C%E8%80%85/</link>
      <pubDate>Sun, 18 Sep 2022 10:49:23 +0800</pubDate>
      
      <guid>https://kreamyu.github.io/%E8%B5%9B%E5%8D%9A%E6%9C%8B%E5%85%8B%E8%BE%B9%E7%BC%98%E8%A1%8C%E8%80%85/</guid>
      <description>赛博朋克：边缘行者 这样的爱情对夜之城来说还是太浪漫了
🎵I Really Want to Stay At Your House🎵</description>
    </item>
    
    <item>
      <title>影评|《人生大事》：人生除死无大事</title>
      <link>https://kreamyu.github.io/%E5%BD%B1%E8%AF%84%E4%BA%BA%E7%94%9F%E5%A4%A7%E4%BA%8B%E4%BA%BA%E7%94%9F%E9%99%A4%E6%AD%BB%E6%97%A0%E5%A4%A7%E4%BA%8B/</link>
      <pubDate>Sun, 17 Jul 2022 11:58:48 +0800</pubDate>
      
      <guid>https://kreamyu.github.io/%E5%BD%B1%E8%AF%84%E4%BA%BA%E7%94%9F%E5%A4%A7%E4%BA%8B%E4%BA%BA%E7%94%9F%E9%99%A4%E6%AD%BB%E6%97%A0%E5%A4%A7%E4%BA%8B/</guid>
      <description>上次和毒哥一起出去玩的时候看了这部《人生大事》，看完觉得非常感动，想写个影评记录一下自己的感悟，苦于一直没有时间，最近稍闲下来才开始动笔。</description>
    </item>
    
    <item>
      <title>EasyRL</title>
      <link>https://kreamyu.github.io/easyrl/</link>
      <pubDate>Thu, 07 Jul 2022 09:42:58 +0800</pubDate>
      
      <guid>https://kreamyu.github.io/easyrl/</guid>
      <description>前言 学习蘑菇书(EasyRL)的笔记。
第1章 强化学习基础 强化学习输入的样本是序列数据
在强化学习的训练过程中，时间非常重要。因为我们得到的是有时间关联的数据（sequential data）， 而不是独立同分布的数据。
Q: 基于策略和基于价值的强化学习方法有什么区别?
A: 对于一个状态转移概率已知的马尔可夫决策过程，我们可以使用动态规划算法来求解。从决策方式来看，强化学习又可以划分为基于策略的方法和基于价值的方法。决策方式是智能体在给定状态下从动作集合中选择一个动作的依据，它是静态的，不随状态变化而变化。 在基于策略的强化学习方法中，智能体会制定一套动作策略（确定在给定状态下需要采取何种动作），并根据这个策略进行操作。强化学习算法直接对策略进行优化，使制定的策略能够获得最大的奖励。 而在基于价值的强化学习方法中，智能体不需要制定显式的策略，它维护一个价值表格或价值函数，并通过这个价值表格或价值函数来选取价值最大的动作。基于价值迭代的方法只能应用在不连续的、离散的环境下（如围棋或某些游戏领域），对于动作集合规模庞大、动作连续的场景（如机器人控制领域），其很难学习到较好的结果（此时基于策略迭代的方法能够根据设定的策略来选择连续的动作）。 基于价值的强化学习算法有Q学习（Q-learning）、 Sarsa 等，而基于策略的强化学习算法有策略梯度（Policy Gradient，PG）算法等。此外，演员-评论员算法同时使用策略和价值评估来做出决策。其中，智能体会根据策略做出动作，而价值函数会对做出的动作给出价值，这样可以在原有的策略梯度算法的基础上加速学习过程，取得更好的效果。</description>
    </item>
    
    <item>
      <title>Apps Recommendation</title>
      <link>https://kreamyu.github.io/apps-recommendation/</link>
      <pubDate>Mon, 04 Jul 2022 17:44:54 +0800</pubDate>
      
      <guid>https://kreamyu.github.io/apps-recommendation/</guid>
      <description>软件推荐 landrop：手机(Android)与电脑(Windows)之间无线传输大量文件，使用局域网，方便 </description>
    </item>
    
    <item>
      <title>深度强化学习 李宏毅</title>
      <link>https://kreamyu.github.io/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0-%E6%9D%8E%E5%AE%8F%E6%AF%85/</link>
      <pubDate>Sun, 03 Jul 2022 10:13:53 +0800</pubDate>
      
      <guid>https://kreamyu.github.io/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0-%E6%9D%8E%E5%AE%8F%E6%AF%85/</guid>
      <description>MRL Lesson Supervised：Learning from teacher Reinforcement Learning：Learning from experience Alpha Go is supervied learning + reinforcement learning.
使用强化学习训练对话机器人：
分别用supervised训练两个agent 让这两个agent进行对话 当它们聊得像人时给与奖励 游戏里面不是本来就有AI吗？为什么还需要用强化学习训练一个AI？
不一样的，强化学习的AI是像人一样训练的，而不是在游戏接口获取信息
episode：以游戏为例，一局游戏的开始到结束称为一个episode
Learn to maximize the expected cumulative reward per episode.
Difficulties of Reinforcement Learning:
Reward delay
Agent&amp;rsquo;s actions affect the subsequent data it receives
Policy-based：Learning an Actor
Value-based：Learning a Critic
Asynchronous Advantage Actor-Critic（A3C）
Alpha Go：policy-based + value-based + model-based（用于预测未来会发生的动作，围棋中有，游戏中很少）
To learn deep reinforcement：
Text book: Reinforcement Learning:An Introduction Lectures of David Silver Lectures of John Schulman Policy-based：Learning an Actor !</description>
    </item>
    
    <item>
      <title>RL_notes</title>
      <link>https://kreamyu.github.io/rl_notes/</link>
      <pubDate>Thu, 30 Jun 2022 22:10:47 +0800</pubDate>
      
      <guid>https://kreamyu.github.io/rl_notes/</guid>
      <description>RL学习笔记 参考资料 蘑菇书EasyRL (datawhalechina.github.io) </description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://kreamyu.github.io/first-post/</link>
      <pubDate>Thu, 30 Jun 2022 17:12:06 +0800</pubDate>
      
      <guid>https://kreamyu.github.io/first-post/</guid>
      <description>背景——挑战一[2] 解决强化学习的本质是最大化个体在与环境交互过程中获得的累计奖励，
而像马里奥这样的游戏在探索的过程中几乎没有外部奖励，只有最后到终点才能获得奖励。这也是这也是这个任务的第一个挑战。
背景——挑战二[3] 第二个挑战在于两点：
模型很难直接在图像上建立 因为通常来说：
在外部奖励稀薄时，大多数内在奖励的表述可以分为两大类：
鼓励代理人探索“新的”状态 鼓励代理人执行行动，以减少代理人预测其自身行动后果的能力(即其对环境的了解)中的错误/不确定性 上面这两类就分别需要测量新颖性的环境状态分布的统计模型和测量不确定性的环境动力学模型。
但这两种模型都很难在图像等高维连续状态空间中建立。
并且，读第二点
环境中还存在噪声，第三点
这说明，直接将图像作为状态输入给代理不行，
挑战二的解决策略[4] 要解决这个问题，「只有当代理遇到难以预测但“可学习”的状态时才给予奖励」采取的方法是
读ppt
为了确定一个好的特征空间来进行未来预测，让我们将所有可以影响代理观察的源分为三种情况：(1)代理可以控制的事情；(2)代理不能控制但可以影响代理的事情(例如，另一个代理驾驶的车辆)；以及(3)代理不能控制的、不影响代理的事情(例如，移动树叶)。一个好的好奇心特征空间应该是模型(1)和(2)，并且不受(3)的影响。后者是因为，如果有一个对代理人来说无关紧要的变异来源，那么代理人就没有动力知道它。
好奇心机制[5,6] 这样挑战二就解决了，而对于挑战1，外部奖励少的问题，作者采用好奇心机制驱动内部奖励的方法帮助代理达到目的。
我们的代理由两个子系统组成：一个是输出好奇心驱动的内在奖励信号的奖励生成器，另一个是输出一系列动作以最大化该奖励信号的策略。除了内在的奖励，代理人还可以选择从环境中获得一些外在的奖励。设代理人在t时刻产生的内在好奇心奖励为Rt，外在好奇心奖励为Rt。策略子系统被训练成最大化这两个奖励RT=Rt+Ret之和，其中Rt几乎(如果不总是)为零。
结果[7] 使用asc进行策略学习
除非另有说明，否则我们使用符号π(S)来表示参数化策略π(s；θP)。我们的好奇心奖励模型可以潜在地用于一系列策略学习方法；在这里讨论的实验中，我们使用异步优势参与者批评者策略梯度(A3C)(Mnih等人，2016)进行策略学习。我们的
挑战1： 这是这篇文章的背景，该任务主要是面临两个挑战
第一个挑战是：
挑战2： 环境中存在的噪声
另一个挑战在于处理代理-环境系统的随机性，这既是由于代理的激励中的噪声，更根本的是由于环境中固有的随机性。以(Schmidhuber，2010)为例，如果接收图像作为状态输入的代理正在观察显示白噪声的电视屏幕，则每个状态都将是新的，因为它不可能预测未来任何像素的值。这意味着代理将对电视屏幕保持好奇心，因为它不知道状态空间的某些部分根本无法建模，因此代理可能落入人工好奇心陷阱并停止其探索。这种随机性的其他例子包括由于来自其他移动实体的阴影或干扰对象的存在而引起的外观变化。有些不同，但相关的是在物理上(可能还有视觉上)不同但功能相似的环境部分进行泛化的挑战，这对大规模问题至关重要。解决所有这些问题的一个建议的解决方案是，只有当代理遇到难以预测但“可学习”的状态时才给予奖励(Schmidhuber，1991)。然而，估计可学习性是一个不平凡的问题(Lope等人，2012年)。
两个挑战的解决方法： 不是在原始像素上进行预测，而是使用将其转化到一个特征空间（通过一个神经网络、自监督学习，输入当前状态和下一个状态预测动作以训练），在特征空间中执行与代理执行的动作相关的信息，
然而，我们通过以下关键洞察力设法避免了以前预测方法的大多数陷阱：我们只预测环境中可能由于我们代理的操作或影响代理而发生的变化，而忽略其余的。也就是说，我们不是在原始的感觉空间(例如像素)中进行预测，而是将感觉输入转换到一个特征空间，在特征空间中只表示与代理执行的动作相关的信息。我们通过自我监督来学习这个特征空间&amp;ndash;在代理逆动力学任务中训练神经网络，预测给定代理当前和下一个状态的代理操作。由于神经网络只需要预测动作，因此它没有动力在其特征嵌入空间内表示环境中不影响代理本身的变化因素。
测量新颖性需要环境状态分布的统计模型，而测量预测误差/不确定性需要建立环境动力学模型，该模型预测给定当前状态(St)和在时间t执行的动作(At)的下一状态(st+1)。这两个模型都很难在高维连续状态空间(如图像)中建立。另一个挑战在于处理代理-环境系统的随机性，这既是由于代理的激励中的噪声，更根本的是由于环境中固有的随机性。以(Schmidhuber，2010)为例，如果接收图像作为状态输入的代理正在观察显示白噪声的电视屏幕，则每个状态都将是新的，因为它不可能预测未来任何像素的值。这意味着代理将对电视屏幕保持好奇心，因为它不知道状态空间的某些部分根本无法建模，因此代理可能落入人工好奇心陷阱并停止其探索。这种随机性的其他例子包括由于来自其他移动实体的阴影或干扰对象的存在而引起的外观变化。有些不同，但相关的是在物理上(可能还有视觉上)不同但功能相似的环境部分进行泛化的挑战，这对大规模问题至关重要。解决所有这些问题的一个建议的解决方案是，只有当代理遇到难以预测但“可学习”的状态时才给予奖励(Schmidhuber，1991)。然而，估计可学习性是一个不平凡的问题(Lope等人，2012年)。
好奇心机制
好奇心机制是一个策略函数，用于鼓励探索和发现新状态，对于获取未来回报很有效。这对于这种外部奖励
然后，我们使用这个特征空间来训练一个前向动力学模型，该模型预测下一个状态的特征表示，给定当前状态和动作的特征表示。我们将前向动力学模型的预测误差作为内在奖励提供给代理，以鼓励其好奇心。
环境状态分布的统计模型（测量新颖性）与环境动力学模型（测量预测误差）
好奇心作用：
解决奖励稀少任务 帮助代理在探索新知识的过程中探索其环境 好奇心是一种让代理学习在未来场景中可能有帮助的技能的机制 在解决奖励稀少的任务时，好奇心的作用已被广泛研究。在我们看来，好奇心还有另外两个基本用途。好奇心帮助代理在探索新知识的过程中探索其环境(探索行为的一个理想特征是，随着代理获得更多的知识，它应该得到改善)。此外，好奇心是一种让代理学习在未来场景中可能有帮助的技能的机制。在这篇文章中，我们评估了我们的好奇心公式在这三个角色中的有效性。
在外部奖励稀疏的环境中，有了好奇心驱动的内部奖励可以帮助代理很好的完成这个任务
泛化性
实验+结果+结论
对于这种需要连续精准操作的游戏，随机探索的效果往往很差。</description>
    </item>
    
  </channel>
</rss>
